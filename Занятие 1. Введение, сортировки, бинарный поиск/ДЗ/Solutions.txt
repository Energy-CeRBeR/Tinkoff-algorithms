def binary_search(arr, elem, left=None, right=None):
    if left is None or right is None:
        left = 0
        right = len(a) - 1

    while right - left >= 0:
        m = (left + right) // 2

        if arr[m] == elem:
            return "YES"
        elif arr[m] < elem:
            left = m + 1
        else:
            right = m - 1

    return "NO"


n, k = map(int, input().split())
a = list(map(int, input().split()))
requests = list(map(int, input().split()))

for num in requests:
    print(binary_search(a, num))



def binary_search(arr, x, left=None, right=None):
    if left is None and right is None:
        left = 0
        right = len(arr) - 1

    mid = (left + right) // 2
    mn_elem = min(arr[left], arr[right])
    mn_dif = 10 ** 28

    if abs(x - arr[left]) < mn_dif:
        mn_dif = abs(x - arr[left])
        mn_elem = arr[left]
    elif abs(x - arr[left]) == mn_dif:
        mn_elem = min(mn_elem, arr[left])

    if abs(x - arr[right]) < mn_dif:
        mn_dif = abs(x - arr[right])
        mn_elem = arr[right]
    elif abs(x - arr[right]) == mn_dif:
        mn_elem = min(mn_elem, arr[right])

    while right - left >= 0:
        if arr[mid] == x:
            return arr[mid]

        elif arr[mid] < x:
            left = mid + 1
            if abs(x - arr[left]) < mn_dif:
                mn_dif = abs(x - arr[left])
                mn_elem = arr[left]
            elif abs(x - arr[left]) == mn_dif:
                mn_elem = min(mn_elem, arr[left])

        else:
            right = mid - 1
            if abs(x - arr[right]) < mn_dif:
                mn_dif = abs(x - arr[right])
                mn_elem = arr[right]
            elif abs(x - arr[right]) == mn_dif:
                mn_elem = min(mn_elem, arr[right])

        mid = (left + right) // 2

    return mn_elem


n, k = map(int, input().split())
a = list(map(int, input().split()))
b = list(map(int, input().split()))
for num in b:
    print(binary_search(a, num))



def search_root(c):
    left = -1
    right = 10 ** 5
    eps = 10e-10

    while right - left >= eps:
        x = (left + right) / 2
        if x ** 2 + (x + 1) ** 0.5 < c:
            left = x
        else:
            right = x

    return x


c = float(input())

ans = search_root(c)
print(ans)

